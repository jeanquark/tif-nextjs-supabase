import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'

import type { AppState, AppThunk } from '../../app/store'
import { getEventUserActions } from './eventUserActionsAPI'

interface EventUserAction {
    id: number
    action_id: number
    event_id: number
    user_id: number
    username: string
    action: {
        name: string
        image: string
    }
    is_completed: boolean
    number_participants: number
    participation_threshold: number
    points: number
    inserted_at: Date
    expired_at: Date
    updated_at: Date
    name: string
    event_action: {
        action: {
            name: string
        }
        id: number
    }
    event_actions: {
        is_completed: boolean
    }
}

export interface EventUserActionsState {
    // eventActions: { id: number, name: string, lauched_by?: string, number_participants?: number, is_completed?: boolean, created_at: Date }[]
    eventUserActions: EventUserAction[]
    status: 'idle' | 'loading' | 'failed'
}

const initialState: EventUserActionsState = {
    eventUserActions: [],
    status: 'idle',
}

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchEventActions = createAsyncThunk(
    'eventActions/fetchEventActions',
    async (id) => {
        const response = await getEventUserActions({id})
        // The value we return becomes the `fulfilled` action payload
        console.log('[REDUX] fetchEventActions response: ', response)
        return response
    }
)

export const eventUserActionsSlice = createSlice({
    name: 'eventUserActions',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        // setActions: (state, action: PayloadAction<ActionsState>) => {
        //     console.log('[REDUX authSlice] setActions: ', action)
        //     // state.actions = action.payload.data
        // }
        setEventUserActions: (state, action: PayloadAction<EventUserAction[]>) => {
        // setEventActions: (state, action: any[]) => {
            console.log('[REDUX eventUserActionsSlice] setEventUserActions action: ', action)
            state.eventUserActions = action.payload
        },
        // addEventUserAction: (state, action: PayloadAction<EventUserAction>) => {
        addEventUserAction: (state, action: PayloadAction<any>) => {
            console.log('[REDUX eventUserActionsSlice] addEventUserAction action: ', action)
            state.eventUserActions.push(action.payload)
        }
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(fetchEventActions.pending, (state) => {
                state.status = 'loading'
            })
            .addCase(fetchEventActions.fulfilled, (state, action) => {
                console.log('[REDUX] @Reducer action: ', action)
                state.status = 'idle'
                state.eventUserActions = action.payload
            })
    },
})

// export const { fetchActions } = actionsSlice.actions
export const { setEventUserActions, addEventUserAction } = eventUserActionsSlice.actions


export const selectEventUserActions = (state: AppState) => state.eventUserActions.eventUserActions
// export const selectEventActions = (state: AppState) => state.eventActions.eventActions


// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
// export const selectCount = (state: AppState) => state.counter.value

export default eventUserActionsSlice.reducer