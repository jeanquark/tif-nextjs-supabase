import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'
import { supabase } from '../../utils/supabaseClient'


import type { AppState, AppThunk } from '../../app/store'
// import { authUser } from './authAPI'

export interface AuthState {
    id: string
    email: string
    username: string
    role: string
    // value: {
    //     id: string
    //     email: string
    //     role: string
    // },
    // status: string,
}

interface loginInfo {
    email: string
    password: string
}

const initialState: AuthState = {
    id: undefined,
    email: undefined,
    username: undefined,
    role: undefined,
}
// const initialState: AuthState = null

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const loginUser = createAsyncThunk(
    'auth/login',
    async ({ email, password }: loginInfo) => {
        // const response = await authUser(email, password)
        // // The value we return becomes the `fulfilled` action payload
        // return response.data

        // const { user, session, error } = await supabase.auth.signIn(email, password)
        // if (error) throw error

        // return
    }
)

export const authSlice = createSlice({
    name: 'auth',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        setAuthUser: (state, action: PayloadAction<AuthState>) => {
            console.log('[REDUX authSlice] setAuthUser: ', action)
            // Redux Toolkit allows us to write "mutating" logic in reducers. It
            // doesn't actually mutate the state because it uses the Immer library,
            // which detects changes to a "draft state" and produces a brand new
            // immutable state based off those changes
            // const session = supabase.auth.session()
            // console.log('session: ', session);

            // state = action.payload
            state.id = action.payload.id
            state.email = action.payload.email
            state.username = action.payload.username
            state.role = action.payload.role
            // state = {
            //     id: action.payload.id,
            //     email: action.payload.email,
            //     role: action.payload.role
            // }
            // Object.assign({}, state, {
            //     id: action.payload.id,
            //     email: action.payload.email,
            //     role: action.payload.role
            // });
            // state.value = {
            //     id: action.payload.id,
            //     email: action.payload.email,
            //     role: action.payload.role
            // }
        }
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
    },
})

export const { setAuthUser } = authSlice.actions

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectAuth = (state: AppState) => state.auth


export default authSlice.reducer