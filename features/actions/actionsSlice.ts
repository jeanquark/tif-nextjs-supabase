import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'

import type { AppState, AppThunk } from '../../app/store'
import { getActions } from './actionsAPI'

export interface ActionsState {
    actions: { id: number, name: string, slug?: string, image?: string }[]
    status: 'idle' | 'loading' | 'failed'
}

const initialState: ActionsState = {
    actions: [],
    status: 'idle',
}

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchActions = createAsyncThunk(
    'actions/fetchActions',
    async () => {
        const response = await getActions()
        // The value we return becomes the `fulfilled` action payload
        console.log('[REDUX] fetchActions response: ', response)
        return response
    }
)

export const actionsSlice = createSlice({
    name: 'action',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        // setActions: (state, action: PayloadAction<ActionsState>) => {
        //     console.log('[REDUX authSlice] setActions: ', action)
        //     // state.actions = action.payload.data
        // }
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(fetchActions.pending, (state) => {
                state.status = 'loading'
            })
            .addCase(fetchActions.fulfilled, (state, action) => {
                console.log('[REDUX] @Reducer action: ', action)
                state.status = 'idle'
                state.actions = action.payload
            })
    },
})

// export const { fetchActions } = actionsSlice.actions

export const selectActions = (state: AppState) => state.actions.actions

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
// export const selectCount = (state: AppState) => state.counter.value

export default actionsSlice.reducer