# Usage
#   Start:          docker-compose up
#   With helpers:   docker-compose -f docker-compose.yml -f ./dev/docker-compose.dev.yml up
#   Stop:           docker-compose down
#   Destroy:        docker-compose -f docker-compose.yml -f ./dev/docker-compose.dev.yml down -v --remove-orphans

version: "3.8"

services:
  #studio:
  #  container_name: supabase-studio
  #  image: supabase/studio:latest
  #  restart: unless-stopped
  #  ports:
  #    - ${STUDIO_PORT}:3000/tcp
  #  environment:
  #    STUDIO_PG_META_URL: http://meta:8080
  #    POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}

  #    SUPABASE_URL: http://kong:8000
  #    SUPABASE_REST_URL: ${PUBLIC_REST_URL}
  #    SUPABASE_ANON_KEY: ${ANON_KEY}
  #    SUPABASE_SERVICE_KEY: ${SERVICE_ROLE_KEY}

  kong:
    container_name: supabase-kong
    image: kong:2.1
    restart: unless-stopped
    ports:
      - ${KONG_HTTP_PORT}:8000/tcp
      - ${KONG_HTTPS_PORT}:8443/tcp
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /var/lib/kong/kong.yml
      # https://github.com/supabase/cli/issues/14
      KONG_DNS_ORDER: LAST,A,CNAME
      KONG_PLUGINS: request-transformer,cors,key-auth,acl
    volumes:
      - ./volumes/api/kong.yml:/var/lib/kong/kong.yml

  auth:
    container_name: supabase-auth
    image: supabase/gotrue:v2.5.21
    depends_on:
      - db
    restart: unless-stopped
    environment:
      GOTRUE_API_HOST: 0.0.0.0
      GOTRUE_API_PORT: 9999

      GOTRUE_DB_DRIVER: postgres
      GOTRUE_DB_DATABASE_URL: postgres://postgres:${POSTGRES_PASSWORD}@db:5432/postgres?search_path=auth

      GOTRUE_SITE_URL: ${SITE_URL}
      GOTRUE_URI_ALLOW_LIST: ${ADDITIONAL_REDIRECT_URLS}
      GOTRUE_DISABLE_SIGNUP: ${DISABLE_SIGNUP}

      GOTRUE_JWT_ADMIN_ROLES: service_role
      GOTRUE_JWT_AUD: authenticated
      GOTRUE_JWT_DEFAULT_GROUP_NAME: authenticated
      GOTRUE_JWT_EXP: ${JWT_EXPIRY}
      GOTRUE_JWT_SECRET: ${JWT_SECRET}

      GOTRUE_EXTERNAL_EMAIL_ENABLED: ${ENABLE_EMAIL_SIGNUP}
      GOTRUE_MAILER_AUTOCONFIRM: ${ENABLE_EMAIL_AUTOCONFIRM}
      GOTRUE_SMTP_ADMIN_EMAIL: ${SMTP_ADMIN_EMAIL}
      GOTRUE_SMTP_HOST: ${SMTP_HOST}
      GOTRUE_SMTP_PORT: ${SMTP_PORT}
      GOTRUE_SMTP_USER: ${SMTP_USER}
      GOTRUE_SMTP_PASS: ${SMTP_PASS}
      GOTRUE_SMTP_SENDER_NAME: ${SMTP_SENDER_NAME}
      GOTRUE_MAILER_URLPATHS_INVITE: ${PUBLIC_API_BASE}/auth/v1/verify
      GOTRUE_MAILER_URLPATHS_CONFIRMATION: ${PUBLIC_API_BASE}/auth/v1/verify
      GOTRUE_MAILER_URLPATHS_RECOVERY: ${PUBLIC_API_BASE}/auth/v1/verify
      GOTRUE_MAILER_URLPATHS_EMAIL_CHANGE: ${PUBLIC_API_BASE}/auth/v1/verify

      GOTRUE_EXTERNAL_PHONE_ENABLED: ${ENABLE_PHONE_SIGNUP}
      GOTRUE_SMS_AUTOCONFIRM: ${ENABLE_PHONE_AUTOCONFIRM}

      GOTRUE_EXTERNAL_GOOGLE_ENABLED: ${ENABLE_GOOGLE_SIGNUP}
      GOTRUE_EXTERNAL_GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOTRUE_EXTERNAL_GOOGLE_SECRET: ${GOOGLE_CLIENT_SECRET}
      GOTRUE_EXTERNAL_GOOGLE_REDIRECT_URI: ${OAUTH_REDIRECT_URI}

      GOTRUE_EXTERNAL_FACEBOOK_ENABLED: ${ENABLE_FACEBOOK_SIGNUP}
      GOTRUE_EXTERNAL_FACEBOOK_CLIENT_ID: ${FACEBOOK_CLIENT_ID}
      GOTRUE_EXTERNAL_FACEBOOK_SECRET: ${FACEBOOK_CLIENT_SECRET}
      #GOTRUE_EXTERNAL_FACEBOOK_REDIRECT_URI: ${OAUTH_REDIRECT_URI}
      GOTRUE_EXTERNAL_FACEBOOK_REDIRECT_URI: ${FACEBOOK_OAUTH_REDIRECT_URI}
      #GOTRUE_EXTERNAL_FACEBOOK_URL: ${FACEBOOK_URL}

      GOTRUE_EXTERNAL_TWITCH_ENABLED: ${ENABLE_TWITCH_SIGNUP}
      GOTRUE_EXTERNAL_TWITCH_CLIENT_ID: ${TWITCH_CLIENT_ID}
      GOTRUE_EXTERNAL_TWITCH_SECRET: ${TWITCH_CLIENT_SECRET}
      GOTRUE_EXTERNAL_TWITCH_REDIRECT_URI: ${TWITCH_OAUTH_REDIRECT_URI}

      GOTRUE_EXTERNAL_SPOTIFY_ENABLED: ${ENABLE_SPOTIFY_SIGNUP}
      GOTRUE_EXTERNAL_SPOTIFY_CLIENT_ID: ${SPOTIFY_CLIENT_ID}
      GOTRUE_EXTERNAL_SPOTIFY_SECRET: ${SPOTIFY_CLIENT_SECRET}
      GOTRUE_EXTERNAL_SPOTIFY_REDIRECT_URI: ${SPOTIFY_OAUTH_REDIRECT_URI}

      API_EXTERNAL_URL: http://localhost:${KONG_HTTP_PORT}
      #API_EXTERNAL_URL: https://thisisfan.com:${KONG_HTTP_PORT}


  rest:
    container_name: supabase-rest
    image: postgrest/postgrest:v9.0.0
    depends_on:
      - db
    restart: unless-stopped
    environment:
      PGRST_DB_URI: postgres://postgres:${POSTGRES_PASSWORD}@db:5432/postgres
      PGRST_DB_SCHEMAS: public,storage, graphql_public
      PGRST_DB_ANON_ROLE: anon
      PGRST_JWT_SECRET: ${JWT_SECRET}
      PGRST_DB_USE_LEGACY_GUCS: "false"

  realtime:
    container_name: supabase-realtime
    image: supabase/realtime:v0.22.4
    depends_on:
      - db
    restart: unless-stopped
    environment:
      DB_HOST: db
      DB_PORT: 5432
      DB_NAME: postgres
      DB_USER: postgres
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      DB_SSL: "false"
      PORT: 4000
      JWT_SECRET: ${JWT_SECRET}
      REPLICATION_MODE: RLS
      REPLICATION_POLL_INTERVAL: 100
      SECURE_CHANNELS: "true"
      SLOT_NAME: supabase_realtime_rls
      TEMPORARY_SLOT: "true"
    command: >
      bash -c "./prod/rel/realtime/bin/realtime eval Realtime.Release.migrate
      && ./prod/rel/realtime/bin/realtime start"

  storage:
    container_name: supabase-storage
    image: supabase/storage-api:v0.10.0
    depends_on:
      - db
      - rest
    restart: unless-stopped
    environment:
      ANON_KEY: ${ANON_KEY}
      SERVICE_KEY: ${SERVICE_ROLE_KEY}
      POSTGREST_URL: http://rest:3000
      PGRST_JWT_SECRET: ${JWT_SECRET}
      DATABASE_URL: postgres://postgres:${POSTGRES_PASSWORD}@db:5432/postgres
      PGOPTIONS: -c search_path=storage,public
      FILE_SIZE_LIMIT: 52428800
      STORAGE_BACKEND: file
      FILE_STORAGE_BACKEND_PATH: /var/lib/storage
      TENANT_ID: stub
      # TODO: https://github.com/supabase/storage-api/issues/55
      REGION: stub
      GLOBAL_S3_BUCKET: stub
    volumes:
      - ./volumes/storage:/var/lib/storage

  meta:
    container_name: supabase-meta
    image: supabase/postgres-meta:v0.29.0
    depends_on:
      - db
    restart: unless-stopped
    environment:
      PG_META_PORT: 8080
      PG_META_DB_HOST: db
      PG_META_DB_PASSWORD: ${POSTGRES_PASSWORD}

  db:
    container_name: supabase-db
    image: supabase/postgres:14.1.0.21
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    restart: unless-stopped
    ports:
      - ${POSTGRES_PORT}:5432
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./volumes/db/data:/var/lib/postgresql/data
      - ./volumes/db/init:/docker-entrypoint-initdb.d
